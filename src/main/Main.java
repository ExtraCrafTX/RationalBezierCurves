package main;

import curve.ControlPoint;
import curve.Curve;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.concurrent.CopyOnWriteArrayList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author Kaamil Jasani
 */
public class Main extends javax.swing.JFrame implements ActionListener{
    
    public final Color BACKGROUND = Color.WHITE;
    public final Color FOREGROUND = Color.BLACK;
    
    CopyOnWriteArrayList<Curve> curves = new CopyOnWriteArrayList<>();
    
    public BufferedImage graph;
    public BufferedImage canvasImage;
    
    Graphics2D g;
    Graphics2D cg;
    
    public final int POINT_INNER_RADIUS = 6;
    
    public Point dragStart = new Point(0, 0);
    
    private long lastFrame = 0;
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        
        graph = new BufferedImage(canvas.getWidth()*2, canvas.getHeight()*2, BufferedImage.TYPE_INT_RGB);
        canvasImage = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_INT_RGB);
        
        g = graph.createGraphics();
        cg = canvasImage.createGraphics();
    
        RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHints(rh);
        cg.setRenderingHints(rh);
        rh = new RenderingHints(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        g.addRenderingHints(rh);
        cg.addRenderingHints(rh);
        rh = new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        cg.addRenderingHints(rh);
        g.setStroke(new BasicStroke(2));
        
        Timer timer = new Timer(17, this);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new javax.swing.JPanel();
        tSlider = new javax.swing.JScrollBar();
        animateCheckBox = new javax.swing.JCheckBox();
        btnSplit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bezier");
        setResizable(false);

        canvas.setBackground(new java.awt.Color(254, 254, 254));
        canvas.setToolTipText("");
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvasMouseMoved(evt);
            }
        });
        canvas.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                canvasMouseWheelMoved(evt);
            }
        });
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        tSlider.setMaximum(210);
        tSlider.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        tSlider.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                tSliderAdjustmentValueChanged(evt);
            }
        });

        animateCheckBox.setText("Animate");
        animateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animateCheckBoxActionPerformed(evt);
            }
        });

        btnSplit.setText("Split");
        btnSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSplitActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Shift+click to add a new curve.\nControl+click to add a new control point to the selected curve. (Select with left mouse button)\nRight click to remove a control point.\nShift+right click to remove an entire curve.\nUse scroll wheel to change weights of control points.\nUse Control + scroll wheel to change weights of control points quicker.\nPress the middle mouse button to reset the weight of a control point.\nControl + middle mouse button to manually set weight of a control point.");
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(btnSplit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(tSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(animateCheckBox)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(animateCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSplit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tSliderAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_tSliderAdjustmentValueChanged
        for(Curve curve : curves){
            if(curve.isSelected()){
                curve.setT(tSlider.getValue()/200f);
            }
        }
    }//GEN-LAST:event_tSliderAdjustmentValueChanged

    private void canvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseMoved
        boolean isOnPoint = false;
        for(Curve curve : curves){
            for(ControlPoint point : curve.getControlPoints()){
                if(!point.isHovered()){
                    if(point.isInside(evt.getPoint())){
                        point.onHover();
                        isOnPoint = true;
                    }
                }else if(!point.isInside(evt.getPoint())){
                    point.onExit();
                }else{
                    isOnPoint = true;
                }
            }
        }
        if(isOnPoint){
            canvas.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
        }else{
            canvas.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_canvasMouseMoved

    private void canvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed
        for(Curve curve : curves){
            for(ControlPoint point : curve.getControlPoints()){
                if(point.isHovered()){
                    point.onPress();
                    dragStart = evt.getPoint();
                }
            }
        }
    }//GEN-LAST:event_canvasMousePressed

    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        for(Curve curve : curves){
            for(ControlPoint point : curve.getControlPoints()){
                if(point.isHovered()){
                    point.onRelease();
                }
            }
        }
    }//GEN-LAST:event_canvasMouseReleased

    private void canvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
        for(Curve curve : curves){
            for(ControlPoint point : curve.getControlPoints()){
                if(point.isHeld()){
                    int dx = evt.getX() - dragStart.x;
                    int dy = evt.getY() - dragStart.y;
                    dragStart = evt.getPoint();
                    point.onDrag(dx, dy);
                }
            }
        }
    }//GEN-LAST:event_canvasMouseDragged

    private void canvasMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_canvasMouseWheelMoved
        for(Curve curve : curves){
            for(ControlPoint point : curve.getControlPoints()){
                if(point.isHovered()){
                    double scrollFac = evt.isControlDown() ? 0.1 : 0.01;
                    double newWeight = point.getWeight() - (scrollFac * evt.getWheelRotation());
                    newWeight = newWeight <= 0 ? point.getWeight() : newWeight;
                    point.setWeight(newWeight);
                }
            }
        }
    }//GEN-LAST:event_canvasMouseWheelMoved

    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
        if(SwingUtilities.isLeftMouseButton(evt)){
            if(evt.isShiftDown()){
                for(Curve curve : curves){
                    curve.setSelected(false);
                }
                Curve curve = new Curve(evt.getX(), evt.getY());
                curves.add(curve);
                tSlider.setValue((int)(curve.getT() * 200));
                animateCheckBox.setSelected(curve.isAnimated());
            }else if(evt.isControlDown()){
                boolean selected = false;
                for(Curve curve : curves){
                    if(curve.isSelected()){
                        curve.addControlPoint(evt.getX(), evt.getY());
                        selected = true;
                    }
                }
                if(!selected){
                    JOptionPane.showMessageDialog(null, "No curve is selected.", "Bezier", JOptionPane.WARNING_MESSAGE);
                }
            }else{
                for(Curve curve : curves){
                    boolean selected = false;
                    for(ControlPoint point : curve.getControlPoints()){
                        if(!evt.isConsumed() && point.isHovered()){
                            tSlider.setValue((int)(curve.getT() * 200));
                            animateCheckBox.setSelected(curve.isAnimated());
                            selected = true;
                            point.setSelected(true);
                            evt.consume();
                        }else{
                            point.setSelected(false);
                        }
                    }
                    curve.setSelected(selected);
                }
            }
        }else if(SwingUtilities.isRightMouseButton(evt)){
            if(evt.isShiftDown()){
                for(Curve curve : curves){
                    for(ControlPoint point : curve.getControlPoints()){
                        if(point.isHovered()){
                            curves.remove(curve);
                        }
                    }
                }
            }else{
                for(Curve curve : curves){
                    for(ControlPoint point : curve.getControlPoints()){
                        if(point.isHovered()){
                            curve.removeControlPoint(point);
                            if(curve.getControlPoints().isEmpty()){
                                curves.remove(curve);
                            }
                        }
                    }
                }
            }
        }else if(SwingUtilities.isMiddleMouseButton(evt)){
            if(evt.isControlDown()){
                for(Curve curve : curves){
                    for(ControlPoint point : curve.getControlPoints()){
                        if(point.isHovered()){
                            while(true){
                                String rawInput = JOptionPane.showInputDialog(null, "Please input weight:", "Bezier", JOptionPane.PLAIN_MESSAGE);
                                if(rawInput == null){
                                    break;
                                }
                                try{
                                    double input = Double.parseDouble(rawInput);
                                    if(input <= 0){
                                        throw new Exception();
                                    }else{
                                        point.setWeightRaw(input);
                                        break;
                                    }
                                }catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "Please enter a valid weight (greater than 0)", "Bezier", JOptionPane.WARNING_MESSAGE);
                                }
                            }
                        }
                    }
                }
            }else{
                for(Curve curve : curves){
                    for(ControlPoint point : curve.getControlPoints()){
                        if(point.isHovered()){
                            point.setWeight(1);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_canvasMouseClicked

    private void animateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animateCheckBoxActionPerformed
        for(Curve curve : curves){
            if(curve.isSelected()){
                curve.setAnimated(animateCheckBox.isSelected());
            }
        }
    }//GEN-LAST:event_animateCheckBoxActionPerformed

    private void btnSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSplitActionPerformed
        boolean split = false;
        for(Curve curve : curves){
            if(curve.isSelected()){
                split = true;
                Curve[] splitCurves = curve.split();
                for(Curve splitCurve : splitCurves){
                    curves.add(splitCurve);
                }
                curves.remove(curve);
            }
        }
        if(!split){
            JOptionPane.showMessageDialog(null, "No curve is selected.", "Bezier", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSplitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox animateCheckBox;
    private javax.swing.JButton btnSplit;
    private javax.swing.JPanel canvas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollBar tSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        updateScreen();
        boolean selected = false;
        for(Curve curve : curves){
            if(curve.isSelected()){
                selected = true;
                break;
            }
        }
        tSlider.setEnabled(selected);
        animateCheckBox.setEnabled(selected);
        btnSplit.setEnabled(selected);
        float delta = 0.017f;
        if(lastFrame == 0){
            lastFrame = System.currentTimeMillis();
        }else{
            long thisFrame = System.currentTimeMillis();
            delta = (thisFrame-lastFrame)/1000f;
            lastFrame = thisFrame;
        }
        incrementTVal(delta);
    }
    
    private void updateScreen() {
        g.setColor(BACKGROUND);
        g.fillRect(0, 0, graph.getWidth(), graph.getHeight());
        for(Curve curve : curves){
            curve.draw(g);
            curve.update();
        }
        Graphics canvasG = canvas.getGraphics();
        cg.drawImage(graph, 0, 0, canvas.getWidth(), canvas.getHeight(), this);
        writeTVal(cg);
        canvasG.drawImage(canvasImage, 0, 0, this);
    }

    private void incrementTVal(float delta) {
        for(Curve curve : curves){
            if(curve.isAnimated()){
                curve.setT(curve.getT() + 0.3f*delta > 1 ? curve.getT() + 0.3f*delta - 1 : curve.getT() + 0.3f*delta);
                if(curve.isSelected())
                    tSlider.setValue((int)(curve.getT() * 200));
            }
        }
    }
    
    private void writeTVal(Graphics2D g) {
        g.setColor(FOREGROUND);
        for(Curve curve : curves){
            if(curve.isSelected()){
                g.drawString("t: " + curve.getT(), 10, 20);
            }
        }
    }
    
}
